 
 //Brute force approach traversing two times the linked list 
 ListNode* removeNthFromEnd(ListNode* head, int n) {

        ListNode* t=head;
        int count=0;
        
        while(t){
            count++;
            t=t->next;
        }
    
        int del=(count-n);
        
        if(count==n){
            return head->next;
        }
        
        t=head;
         count=0;
          while(t){
             count++;
            if(count==del){   
                ListNode* temp=t->next;
                t->next=t->next->next;
                delete temp;
                return head;
            }
            t=t->next;   
        }
        return head;
    }
    
    
    //optimized approach using slow and fast Approach
    
     ListNode* removeNthFromEnd(ListNode* head, int n) {
       
       //creating dummy node to overcome from edge cases.
        ListNode* start=new ListNode();
         start->next=head;
    
        ListNode* fast=start;
        ListNode* slow=start;
        
         //traversing fast till n.
        for(int i=0;i<n;i++){
            fast=fast->next;
        }
        //now we traverse our slow and fast till when our fast next not becomes null
        while(fast->next){
            fast=fast->next;
            slow=slow->next;
        }
        
        //then you will automatically see slow pointer is just behind the node which we want to delete .then simply do following operation.
        slow->next=slow->next->next;
        
        return start->next;
    }
    
